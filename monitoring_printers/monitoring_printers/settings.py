"""
Django settings for monitoring_printers project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

import ldap
from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery, GroupOfNamesType, PosixGroupType, LDAPSearchUnion

import logging
from decouple import config

from celery.schedules import crontab

import printers.tasks

logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
# logger.setLevel(logging.WARNING)
logger.setLevel(logging.DEBUG)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool)

ALLOWED_HOSTS = ['*']  # [config("HOST_IP"), '127.0.0.1']

INTERNAL_IPS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'printers.apps.PrintersConfig',
    # приложение можно поставить в начало списка, чтобы template брались в первую очередь из его раздела
    'app_auth_users.apps.AppAuthUsersConfig',

    'debug_toolbar',
    'django_dyn_dt',  # <-- NEW App
    'django_tables2',
    'django_select2',
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
    'django_celery_beat',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # 'django.contrib.auth.middleware.RemoteUserMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

ROOT_URLCONF = 'monitoring_printers.urls'

TEMPLATE_DIR_DATATB = os.path.join(BASE_DIR, "django_dyn_dt/templates")  # <-- NEW App

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), TEMPLATE_DIR_DATATB],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

WSGI_APPLICATION = 'monitoring_printers.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / config('DATABASE_NAME'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-ru'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

LOGIN_REDIRECT_URL = '/'

# LDAP
LDAP_IGNORE_CERT_ERRORS = True
AUTH_LDAP_START_TLS = False

AUTH_LDAP_SERVER_URI = config("AUTH_LDAP_SERVER_URI")

AUTH_LDAP_AUTHORIZE_ALL_USERS = True
AUTH_LDAP_PERMIT_EMPTY_PASSWORD = True

# AUTH_LDAP_BIND_DN = 'cn=ldap,cn=admin,dc=agrohold,dc=ru'
AUTH_LDAP_BIND_DN = config("AUTH_LDAP_BIND_DN")
AUTH_LDAP_BIND_PASSWORD = config("AUTH_LDAP_BIND_PASSWORD")

AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    LDAPSearch(config("AUTH_LDAP_USER_SEARCH_LDAPSearch1"), ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"),
    LDAPSearch(config("AUTH_LDAP_USER_SEARCH_LDAPSearch2"), ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"),
    LDAPSearch(config("AUTH_LDAP_USER_SEARCH_LDAPSearch3"), ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)"),
)

AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",

    # "password": "userPassword",
}

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(config("AUTH_LDAP_GROUP_SEARCH1"),
                                    ldap.SCOPE_SUBTREE, "(objectClass=Group)")
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")
# AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr="cn")

AUTH_LDAP_REQUIRE_GROUP = config("AUTH_LDAP_REQUIRE_GROUP1")

AUTH_LDAP_MIRROR_GROUPS = True

AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": config("AUTH_LDAP_USER_FLAGS_BY_GROUP1"),
}

# AUTH_LDAP_PROFILE_ATTR_MAP = {
#         "home_directory": "homeDirectory"
# }

AUTH_LDAP_ALWAYS_UPDATE_USER = True

AUTH_LDAP_FIND_GROUP_PERMS = True

AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_CACHE_TIMEOUT = 3600

SESSION_COOKIE_AGE = 30 * 24 * 60 * 60  # Время жизни сессии в куках (указывается в секундах 30 дней)
# также можно настроить куки-name (название куки, в которой будет хранится ключ сессии)
# и истечение сессии при закрытии браузера (по умолчанию false)

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',

    # 'django_remote_auth_ldap.backend.RemoteUserLDAPBackend',
)

DRAL_CHECK_DOMAIN = False

# AUTH_LDAP_CONNECTION_OPTIONS = { ldap.OPT_REFERRALS: 0}


# Настройки Celery
# CELERY_BROKER_URL = 'redis://localhost:6379/0'  # URL брокера сообщений
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Хранилище результатов

# # Дополнительные настройки (опционально)
# CELERY_ACCEPT_CONTENT = ['json']  # Разрешенные форматы сериализации
# CELERY_TASK_SERIALIZER = 'json'  # Формат сериализации задач
# CELERY_RESULT_SERIALIZER = 'json'  # Формат сериализации результатов
# CELERY_TIMEZONE = 'Europe/Moscow'  # Временная зона для планировщика задач


CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_BEAT_SCHEDULE = {
    "sample_task": {
        "task": "printers.tasks.printers_task",
        "schedule": crontab(hour=15, minute=0),
    },
    "sample_task_2": {
        "task": "printers.tasks.printers_task",
        "schedule": crontab(hour=9, minute=0),
    },
}
